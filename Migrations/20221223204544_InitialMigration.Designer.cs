// <auto-generated />
using System;
using DotNet_API_Example.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DotNetAPIExample.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221223204544_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Boomslag.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Tuve sexo con antonella en el 2023",
                            CreatedDate = new DateTime(2022, 12, 23, 20, 45, 44, 817, DateTimeKind.Utc).AddTicks(4010),
                            Description = "La vez que tuve sex con a",
                            Rate = 200.0,
                            Thumbnail = "https://boomslag.s3.us-east-2.amazonaws.com/lightbulb.jpg",
                            Title = "Sexo con anto",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Antos titties",
                            CreatedDate = new DateTime(2022, 12, 23, 20, 45, 44, 817, DateTimeKind.Utc).AddTicks(4012),
                            Description = "Las tetas de antonella, YUMMY",
                            Rate = 200.0,
                            Thumbnail = "https://boomslag.s3.us-east-2.amazonaws.com/lightbulb.jpg",
                            Title = "Titties",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Boomslag.Models.BlogNumber", b =>
                {
                    b.Property<int>("BlogNo")
                        .HasColumnType("integer");

                    b.Property<int>("BlogID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SpecialDetails")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("BlogNo");

                    b.HasIndex("BlogID");

                    b.ToTable("BlogNumbers");
                });

            modelBuilder.Entity("Boomslag.Models.BlogNumber", b =>
                {
                    b.HasOne("Boomslag.Models.Blog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });
#pragma warning restore 612, 618
        }
    }
}
